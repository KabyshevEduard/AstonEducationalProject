Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"2d08b4cc-d5c4-43ce-aa9a-25b1e2406bfc\" name=\"Changes\" comment=\"Add getArray\">\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/collection/MyArrayList.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/collection/MyArrayList.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/org/example/collection/MyList.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/org/example/collection/MyList.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/MyArrayListTests.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/MyArrayListTests.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Interface\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"Correct-Validators\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;KabyshevEduard&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/KabyshevEduard/AstonEducationalProject.git&quot;,\n    &quot;accountId&quot;: &quot;799b50c3-306a-4603-8cd2-b7ebd0cc87e9&quot;\n  }\n}</component>\n  <component name=\"ProblemsViewState\">\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 1\n}</component>\n  <component name=\"ProjectId\" id=\"33928ERMKEXqV2X1oGrRHAdiivK\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"Application.Main.executor\": \"Run\",\n    \"JUnit.MyArrayListTests.CountElementTest.executor\": \"Run\",\n    \"JUnit.MyArrayListTests.addTest.executor\": \"Run\",\n    \"JUnit.MyArrayListTests.countElementTest.executor\": \"Run\",\n    \"JUnit.MyArrayListTests.executor\": \"Run\",\n    \"JUnit.MyArrayListTests.getTest.executor\": \"Run\",\n    \"JUnit.ParseUtilTests.parseFileTest.executor\": \"Run\",\n    \"JUnit.ParseUtilTests.parseLineTest.executor\": \"Run\",\n    \"ModuleVcsDetector.initialDetectionPerformed\": \"true\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"RunOnceActivity.git.unshallow\": \"true\",\n    \"git-widget-placeholder\": \"main\",\n    \"node.js.detected.package.eslint\": \"true\",\n    \"node.js.detected.package.tslint\": \"true\",\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\n    \"nodejs_package_manager_path\": \"npm\",\n    \"onboarding.tips.debug.path\": \"/Users/eduardkabyshev/Desktop/AstonProject/src/main/java/org/example/Main.java\",\n    \"vue.rearranger.settings.migration\": \"true\"\n  }\n}]]></component>\n  <component name=\"RunManager\">\n    <configuration name=\"MyArrayListTests.CountElementTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AstonProject\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"MyArrayListTests\" />\n      <option name=\"METHOD_NAME\" value=\"CountElementTest\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MyArrayListTests.addTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AstonProject\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"MyArrayListTests\" />\n      <option name=\"METHOD_NAME\" value=\"addTest\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MyArrayListTests.countElementTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AstonProject\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"MyArrayListTests\" />\n      <option name=\"METHOD_NAME\" value=\"countElementTest\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"MyArrayListTests.getTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AstonProject\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"MyArrayListTests\" />\n      <option name=\"METHOD_NAME\" value=\"getTest\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"ParseUtilTests.parseFileTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AstonProject\" />\n      <option name=\"PACKAGE_NAME\" value=\"\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"ParseUtilTests\" />\n      <option name=\"METHOD_NAME\" value=\"parseFileTest\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"JUnit.ParseUtilTests.parseFileTest\" />\n        <item itemvalue=\"JUnit.MyArrayListTests.getTest\" />\n        <item itemvalue=\"JUnit.MyArrayListTests.countElementTest\" />\n        <item itemvalue=\"JUnit.MyArrayListTests.CountElementTest\" />\n        <item itemvalue=\"JUnit.MyArrayListTests.addTest\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26094.121\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-b26f3e71634d-JavaScript-IU-251.26094.121\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"2d08b4cc-d5c4-43ce-aa9a-25b1e2406bfc\" name=\"Changes\" comment=\"\" />\n      <created>1758714806928</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1758714806928</updated>\n      <workItem from=\"1758714807951\" duration=\"24541000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Base\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1758715247879</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1758715247879</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Base structure\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1758715280575</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1758715280575</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Do block 3 without extra tasks&#10;- Add custom class&#10;- Add comparators&#10;- Add parse util\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1758742306660</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1758742306660</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Correct MyList\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1758803810370</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1758803810370</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"Add getArray\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1758894944849</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1758894944849</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"Correct countElements\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1759400368781</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1759400368781</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"7\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"EduardsBranch\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Base\" />\n    <MESSAGE value=\"Base structure\" />\n    <MESSAGE value=\"Do block 3 without extra tasks&#10;- Add custom class&#10;- Add comparators&#10;- Add parse util\" />\n    <MESSAGE value=\"Correct MyList\" />\n    <MESSAGE value=\"Add getArray\" />\n    <MESSAGE value=\"Correct countElements\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Correct countElements\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8a516e8f6d4f5b5668c2092d7d4bed8653b5307b)
+++ b/.idea/workspace.xml	(date 1759412709415)
@@ -53,30 +53,30 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.Main.executor": "Run",
-    "JUnit.MyArrayListTests.CountElementTest.executor": "Run",
-    "JUnit.MyArrayListTests.addTest.executor": "Run",
-    "JUnit.MyArrayListTests.countElementTest.executor": "Run",
-    "JUnit.MyArrayListTests.executor": "Run",
-    "JUnit.MyArrayListTests.getTest.executor": "Run",
-    "JUnit.ParseUtilTests.parseFileTest.executor": "Run",
-    "JUnit.ParseUtilTests.parseLineTest.executor": "Run",
-    "ModuleVcsDetector.initialDetectionPerformed": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "git-widget-placeholder": "main",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "onboarding.tips.debug.path": "/Users/eduardkabyshev/Desktop/AstonProject/src/main/java/org/example/Main.java",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.MyArrayListTests.CountElementTest.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.MyArrayListTests.addTest.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.MyArrayListTests.countElementTest.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.MyArrayListTests.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.MyArrayListTests.getTest.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.ParseUtilTests.parseFileTest.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.ParseUtilTests.parseLineTest.executor&quot;: &quot;Run&quot;,
+    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/eduardkabyshev/Desktop/AstonProject/src/main/java/org/example/Main.java&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
-  <component name="RunManager">
+}</component>
+  <component name="RunManager" selected="JUnit.MyArrayListTests.addTest">
     <configuration name="MyArrayListTests.CountElementTest" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="AstonProject" />
       <option name="PACKAGE_NAME" value="" />
Index: src/main/java/org/example/sort/Sort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.sort;\n\nimport java.util.function.ToIntFunction;\n\npublic interface Sort<T> {\n    void sort(T[] array);\n    void sortEven(T[] array, ToIntFunction<T> numericField);\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/sort/Sort.java b/src/main/java/org/example/sort/Sort.java
--- a/src/main/java/org/example/sort/Sort.java	(revision 8a516e8f6d4f5b5668c2092d7d4bed8653b5307b)
+++ b/src/main/java/org/example/sort/Sort.java	(date 1759413113300)
@@ -1,8 +1,11 @@
 package org.example.sort;
 
+import org.example.collection.MyList;
+
 import java.util.function.ToIntFunction;
 
 public interface Sort<T> {
     void sort(T[] array);
     void sortEven(T[] array, ToIntFunction<T> numericField);
+    void sort(MyList<T> myList);
 }
\ No newline at end of file
Index: src/main/java/org/example/sort/SortExecuter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/sort/SortExecuter.java b/src/main/java/org/example/sort/SortExecuter.java
new file mode 100644
--- /dev/null	(date 1759413113304)
+++ b/src/main/java/org/example/sort/SortExecuter.java	(date 1759413113304)
@@ -0,0 +1,16 @@
+package org.example.sort;
+
+import org.example.collection.MyList;
+
+public class SortExecuter<T> {
+
+    private Sort<T> sorter;
+
+    public void setSorter(Sort<T> sorter) {
+        this.sorter = sorter;
+    }
+
+    public void executeSort(MyList<T> myList) {
+        sorter.sort(myList);
+    }
+}
Index: src/main/java/org/example/sort/QuickSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.sort;\n\nimport org.example.collection.*;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.concurrent.*;\nimport java.util.function.ToIntFunction;\n\npublic class QuickSort<T> implements Sort<T> {\n\n    private final Comparator<? super T> comparator;\n\n    public QuickSort(Comparator<? super T> comparator) {\n        this.comparator = comparator;\n    }\n\n    @Override\n    public void sort(T[] array) {\n        if (array == null || array.length < 2) return;\n\n        ExecutorService executor = Executors.newFixedThreadPool(Math.max(2, Runtime.getRuntime().availableProcessors() / 2));\n\n        try {\n            quickSort(array, 0, array.length - 1, executor);\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    public void sort(MyList<T> myList) {\n        T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());\n        sort(array);\n        System.arraycopy(array, 0, myList.getArray(), 0, array.length);\n    }\n\n    @Override\n    public void sortEven(T[] array, ToIntFunction<T> numericField) {\n        if (array == null || array.length < 2) return;\n\n        T[] evenElements = getEvenElements(array, numericField);\n\n        ExecutorService executor = Executors.newFixedThreadPool(Math.max(2, Runtime.getRuntime().availableProcessors() / 2));\n\n        try {\n            quickSort(evenElements, 0, evenElements.length - 1, executor);\n            int evenIndex = 0;\n\n            for (int i = 0; i < array.length; i++) {\n                if (numericField.applyAsInt(array[i]) % 2 == 0) {\n                    array[i] = evenElements[evenIndex++];\n                }\n            }\n\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    public void sortEven(MyList<T> myList, ToIntFunction<T> numericField) {\n        T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());\n        sortEven(array, numericField);\n        System.arraycopy(array, 0, myList.getArray(), 0, array.length);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private T[] getEvenElements(T[] array, ToIntFunction<T> numericField) {\n        T[] evenElements = (T[]) new Object[array.length];\n\n        int count = 0;\n\n        for (T element : array) {\n            if (numericField.applyAsInt(element) % 2 == 0) {\n                evenElements[count++] = element;\n            }\n        }\n\n        evenElements = Arrays.copyOf(evenElements, count);\n\n        return evenElements;\n    }\n\n    private void quickSort(T[] array, int low, int high, ExecutorService executor) {\n        if (low >= high) return;\n\n        int pivotPos = partition(array, low, high);\n\n        Future<?> left = executor.submit(() -> quickSort(array, low, pivotPos - 1, executor));\n        Future<?> right = executor.submit(() -> quickSort(array, pivotPos + 1, high, executor));\n\n        try {\n            left.get();\n            right.get();\n        } catch (InterruptedException | ExecutionException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(\"Ошибка в потоковой сортировке\", e);\n        }\n    }\n\n    private int partition(T[] array, int low, int high) {\n        int pivotIndex = (low + high) / 2;\n        T pivot = array[pivotIndex];\n\n        swap(array, pivotIndex, high);\n\n        int i = low;\n\n        for (int j = low; j < high; j++) {\n            if (comparator.compare(array[j], pivot) <= 0) {\n                swap(array, i++, j);\n            }\n        }\n\n        swap(array, i, high);\n\n        return i;\n    }\n\n    private void swap(T[] array, int i, int j) {\n        T temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/sort/QuickSort.java b/src/main/java/org/example/sort/QuickSort.java
--- a/src/main/java/org/example/sort/QuickSort.java	(revision 8a516e8f6d4f5b5668c2092d7d4bed8653b5307b)
+++ b/src/main/java/org/example/sort/QuickSort.java	(date 1759413113298)
@@ -28,6 +28,7 @@
         }
     }
 
+    @Override
     public void sort(MyList<T> myList) {
         T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());
         sort(array);
Index: src/main/java/org/example/sort/MergeSort.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.sort;\n\nimport org.example.collection.*;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.concurrent.*;\nimport java.util.function.ToIntFunction;\n\npublic class MergeSort<T> implements Sort<T> {\n\n    private final Comparator<? super T> comparator;\n\n    public MergeSort(Comparator<? super T> comparator) {\n        this.comparator = comparator;\n    }\n\n    @Override\n    public void sort(T[] array) {\n        if (array == null || array.length < 2) return;\n\n        ExecutorService executor = Executors.newFixedThreadPool(Math.max(2, Runtime.getRuntime().availableProcessors() / 2));\n\n        try {\n            T[] sorted = mergeSort(array, executor);\n            System.arraycopy(sorted, 0, array, 0, array.length);\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    public void sort(MyList<T> myList) {\n        T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());\n        sort(array);\n        System.arraycopy(array, 0, myList.getArray(), 0, array.length);\n    }\n\n    @Override\n    public void sortEven(T[] array, ToIntFunction<T> numericField) {\n        if (array == null || array.length < 2) return;\n\n        T[] evenElements = getEvenElements(array, numericField);\n\n        ExecutorService executor = Executors.newFixedThreadPool(Math.max(2, Runtime.getRuntime().availableProcessors() / 2));\n\n        try {\n            T[] sortedEvens = mergeSort(evenElements, executor);\n            int evenIndex = 0;\n\n            for (int i = 0; i < array.length; i++) {\n                if (numericField.applyAsInt(array[i]) % 2 == 0) {\n                    array[i] = sortedEvens[evenIndex++];\n                }\n            }\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    public void sortEven(MyList<T> myList, ToIntFunction<T> numericField) {\n        T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());\n        sortEven(array, numericField);\n        System.arraycopy(array, 0, myList.getArray(), 0, array.length);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private T[] getEvenElements(T[] array, ToIntFunction<T> numericField) {\n        T[] evenElements = (T[]) new Object[array.length];\n        \n        int count = 0;\n\n        for (T element : array) {\n            if (numericField.applyAsInt(element) % 2 == 0) {\n                evenElements[count++] = element;\n            }\n        }\n\n        evenElements = Arrays.copyOf(evenElements, count);\n        \n        return evenElements;\n    }\n\n    private T[] mergeSort(T[] arrayA, ExecutorService executor) {\n        if (arrayA == null) {\n            return null;\n        } else if (arrayA.length < 2) {\n            return arrayA;\n        } else {\n            int mid = arrayA.length / 2;\n            T[] left = Arrays.copyOfRange(arrayA, 0, mid);\n            T[] right = Arrays.copyOfRange(arrayA, mid, arrayA.length);\n\n            Future<T[]> futureLeft = executor.submit(() -> mergeSort(left, executor));\n            Future<T[]> futureRight = executor.submit(() -> mergeSort(right, executor));\n\n            try {\n                T[] sortedLeft = futureLeft.get();\n                T[] sortedRight = futureRight.get();\n\n                return mergeArray(sortedLeft, sortedRight);\n            } catch (InterruptedException | ExecutionException e) {\n                Thread.currentThread().interrupt();\n                throw new RuntimeException(\"Ошибка в потоковой сортировке\", e);\n            }\n        }\n    }\n\n    private T[] mergeArray(T[] arrayA, T[] arrayB) {\n        @SuppressWarnings(\"unchecked\")\n        T[] arrayC = (T[]) new Object[arrayA.length + arrayB.length];\n        int positionA = 0, positionB = 0, index = 0;\n\n        while (positionA < arrayA.length && positionB < arrayB.length) {\n            if (comparator.compare(arrayA[positionA], arrayB[positionB]) <= 0) {\n                arrayC[index++] = arrayA[positionA++];\n            } else {\n                arrayC[index++] = arrayB[positionB++];\n            }\n        }\n\n        while (positionA < arrayA.length) {\n            arrayC[index++] = arrayA[positionA++];\n        }\n\n        while (positionB < arrayB.length) {\n            arrayC[index++] = arrayB[positionB++];\n        }\n\n        return arrayC;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/sort/MergeSort.java b/src/main/java/org/example/sort/MergeSort.java
--- a/src/main/java/org/example/sort/MergeSort.java	(revision 8a516e8f6d4f5b5668c2092d7d4bed8653b5307b)
+++ b/src/main/java/org/example/sort/MergeSort.java	(date 1759413113308)
@@ -29,6 +29,7 @@
         }
     }
 
+    @Override
     public void sort(MyList<T> myList) {
         T[] array = Arrays.copyOf(myList.getArray(), myList.getLength());
         sort(array);
